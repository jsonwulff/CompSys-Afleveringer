read_long:
.LFB0:
    subq $8, %rsp
    movq %r11, (%rsp)
    leaq 268435456, %r11
    movq (%r11), %rax
    movq (%rsp), %r11
    addq $8, %rsp
    ret %r11
gen_random:
.LFB1:
    subq $8, %rsp
    movq %r11, (%rsp)
    leaq 268435457, %r11
    movq (%r11), %rax
    movq (%rsp), %r11
    addq $8, %rsp
    ret %r11
write_long:
.LFB2:
    subq $8, %rsp
    movq %r11, (%rsp)
    leaq 268435458, %r11
    movq %rdi, (%r11)
    movq (%rsp), %r11
    addq $8, %rsp
    ret %r11
get_argc:
.LFB3:
    subq $8, %rsp
    movq %r11, (%rsp)
    leaq 536870912, %r11
    movq (%r11), %rax
    movq (%rsp), %r11
    addq $8, %rsp
    ret %r11
get_argv:
.LFB4:
    subq $8, %rsp
    movq %r11, (%rsp)
    movq $536870920, %eax
    movq (%rsp), %r11
    addq $8, %rsp
    ret %r11
print_array:
.LFB7:
    subq $32, %rsp
    movq %r11, 24(%rsp)
    movq %r12, 16(%rsp)
    movq %rbp, 8(%rsp)
    movq %rbx, (%rsp)
    movq %rdi, %rbp
    movq %rsi, %r12
    movq $0, %ebx
    jmp .L7
.L8:
    leaq (%r12, %rbx, 8), %r11
    movq (%r11), %rdi
    call write_long, %r11
    addq $1, %rbx
.L7:
    cbg %rbp, %rbx, .L8
    movq (%rsp), %rbx
    movq 8(%rsp), %rbp
    movq 16(%rsp), %r12
    movq 24(%rsp), %r11
    addq $32, %rsp
    ret %r11
init_allocator:
.LFB8:
    subq $8, %rsp
    movq %r11, (%rsp)
    leaq cur_allocator, %r11
    movq $805306368, %r10
    movq %r10, (%r11)
    movq (%rsp), %r11
    addq $8, %rsp
    ret %r11
allocate:
.LFB9:
    subq $8, %rsp
    movq %r11, (%rsp)
    leaq cur_allocator, %r11
    movq (%r11), %rax
    leaq (%rax, %rdi, 8), %rdx
    leaq cur_allocator, %r11
    movq %rdx, (%r11)
    movq (%rsp), %r11
    addq $8, %rsp
    ret %r11
get_random_array:
.LFB5:
    subq $40, %rsp
    movq %r11, 32(%rsp)
    movq %r13, 24(%rsp)
    movq %r12, 16(%rsp)
    movq %rbp, 8(%rsp)
    movq %rbx, (%rsp)
    movq %rdi, %r12
    call allocate, %r11
    movq %rax, %r13
    movq $0, %ebx
    jmp .L13
.L14:
    leaq 0(%r13, %rbx, 8), %rbp
    movq $0, %eax
    call gen_random, %r11
    movq %rax, 0(%rbp)
    addq $1, %rbx
.L13:
    cbg %r12, %rbx, .L14
    movq %r13, %rax
    movq (%rsp), %rbx
    movq 8(%rsp), %rbp
    movq 16(%rsp), %r12
    movq 24(%rsp), %r13
    movq 32(%rsp), %r11
    addq $40, %rsp
    ret %r11
read_array:
.LFB6:
    subq $40, %rsp
    movq %r11, 32(%rsp)
    movq %r13, 24(%rsp)
    movq %r12, 16(%rsp)
    movq %rbp, 8(%rsp)
    movq %rbx, (%rsp)
    movq %rdi, %r12
    call allocate, %r11
    movq %rax, %r13
    movq $0, %ebx
    jmp .L17
.L18:
    leaq 0(%r13, %rbx, 8), %rbp
    movq $0, %eax
    call read_long, %r11
    movq %rax, 0(%rbp)
    addq $1, %rbx
.L17:
    cbg %r12, %rbx, .L18
    movq %r13, %rax
    movq (%rsp), %rbx
    movq 8(%rsp), %rbp
    movq 16(%rsp), %r12
    movq 24(%rsp), %r13
    movq 32(%rsp), %r11
    addq $40, %rsp
    ret %r11
quick_sort:
.LFB11:
    subq $16, %rsp
    movq %r11, 8(%rsp)
    movq %r15, (%rsp)
    cble %rdx, %rsi, .L34
    movq %rdx, %r10
    subq %rsi, %r10
    cbl $7, %r10, .L22
    leaq (%rdi, %rsi, 8), %r8
    movq $0, %r9d
    jmp .L23
.L25:
    addq $1, %rax
.L24:
    cbge %rax, %r10, .L36
    leaq (%r8, %r9, 8), %rsi
    movq (%rsi), %rcx
    leaq (%r8, %rax, 8), %rdx
    movq (%rdx), %rdi
    cbge %rdi, %rcx, .L25
    movq %rdi, (%rsi)
    movq %rcx, (%rdx)
    jmp .L25
.L36:
    movq %r11, %r9
.L23:
    cbge %r9, %r10, .L37
    leaq 1(%r9), %r11
    movq %r11, %rax
    jmp .L24
.L37:
    movq (%rsp), %r15
    movq 8(%rsp), %r11
    addq $16, %rsp
    ret %r11
.L22:
    subq $24, %rsp
    movq %r12, 16(%rsp)
    movq %rbp, 8(%rsp)
    movq %rbx, (%rsp)
    leaq (%rsi, %rdx, 1), %rax
    sarq $1, %rax
    leaq (%rdi, %rax, 8), %r15
    movq (%r15), %r9
    leaq -1(%rsi), %r10
    leaq 1(%rdx), %rbx
    jmp .L28
.L32:
    movq %rax, %rbx
.L30:
    leaq -1(%rbx), %rax
    leaq (%rdi, %rax, 8), %rcx
    movq (%rcx), %r8
    cbl %r9, %r8, .L32
    cble %rax, %r10, .L31
    movq %r8, 0(%rbp)
    movq %r11, (%rcx)
    movq %rax, %rbx
.L28:
    addq $1, %r10
    leaq (%rdi, %r10, 8), %rbp
    movq 0(%rbp), %r11
    cbg %r9, %r11, .L28
    jmp .L30
.L31:
    movq %rdx, %r12
    movq %rdi, %rbp
    movq %rax, %rdx
    call quick_sort, %r11
    movq %r12, %rdx
    movq %rbx, %rsi
    movq %rbp, %rdi
    call quick_sort, %r11
    movq (%rsp), %rbx
    movq 8(%rsp), %rbp
    movq 16(%rsp), %r12
    movq 24(%rsp), %r15
    movq 32(%rsp), %r11
    addq $40, %rsp
    ret %r11
.L34:
    movq (%rsp), %r15
    movq 8(%rsp), %r11
    addq $16, %rsp
    ret %r11
run:
.LFB12:
    subq $32, %rsp
    movq %r11, 24(%rsp)
    movq %r12, 16(%rsp)
    movq %rbp, 8(%rsp)
    movq %rbx, (%rsp)
    movq $0, %eax
    call init_allocator, %r11
    movq $0, %eax
    call read_long, %r11
    movq %rax, %r12
    andq $1, %r12d
    andq $2, %eax
    movq %rax, %rbx
    movq $0, %eax
    call read_long, %r11
    movq %rax, %rbp
    movq %rax, %rdi
    call get_random_array, %r11
    cbe $0, %rbx, .L39
    movq %rbp, %rdi
    call read_array, %r11
    movq %rax, %rbx
.L40:
    leaq -1(%rbp), %rdx
    movq $0, %esi
    movq %rbx, %rdi
    call quick_sort, %r11
    cbne $0, %r12, .L43
.L38:
    movq %rbx, %rax
    movq (%rsp), %rbx
    movq 8(%rsp), %rbp
    movq 16(%rsp), %r12
    movq 24(%rsp), %r11
    addq $32, %rsp
    ret %r11
.L39:
    movq %rbp, %rdi
    call get_random_array, %r11
    movq %rax, %rbx
    jmp .L40
.L43:
    movq %rbx, %rsi
    movq %rbp, %rdi
    call print_array, %r11
    jmp .L38
.LFE0:
.LFE1:
.LFE2:
.LFE3:
.LFE4:
.LFE7:
.LFE8:
.LFE9:
.LFE5:
.LFE6:
.LFE11:
.LFE12:
    .comm cur_allocator,8,8
