This repository contains the following files:
 * Makefile
    - You need to update this with the location of your x86prime version
    > make [sortalg]   - generates .hex versions of the specified sorting algorithm. For quicksort it uses the
                         reference translation to .prime, for other algorithms it compiles from C over x86 to .prime first
    > make clean       - cleans up the src directory.
    > make ../src.zip  - Zips the needed parts of the directory; for hand-in.

 * heapsort.c         - An implementation of Heapsort
 * quicksort.c        - An implementation of Quicksort (This is to make it easier to understand quicksort.prime)
 * quicksort.prime    - The reference translation of Quicksort.c
 * mergesort.c	      - An implementation of Mergesort
 * mergesort_2.c      - A semi-empty file in which you can implement your own version of mergesort.
 * quicksort_2.prime  - A semi-empty file in which you can put your optimized version of quicksort.
 * io.c               - Some useful library functions specific for translation to x86prime.
                        This file in included at the beginning of the sorting programs.
                        The file contains I/O functions:
                            long read_long();                               - Reads a long value from stdin and returns it.
                            read_array(long num_entries);                   - Reads and entire array from stdin; one value at the time.
                            void write_long(long value);                    - Writes a long value to stdout.
                            void print_array(long num_elem, long array[]);  - Writes an entire array to stdout; space separated.
                            long gen_random();                              - Generates and returns a random long value.
                            long* get_random_array(long num_entries);       - Generates an entire array for random long values.
 * alloc.c            - Some useful library functions specific for translation to x86prime.
                        This file contains A rudimentary allocator
                            volatile long* cur_allocator;                   - The allocator
                            void init_allocator();                          - Setup the location
                            long* allocate(long num_entries);               - Allocates some number of elements

 * run-performance.sh
    - Script that gives the basic idea of running the performance simulation
    - Must be updated with location to your x86prime
    - The script does not perform all the performance tests you need to do, so it must be updated to include all
    - Data generated by the script is written to the data directory
 * run-test.sh
    - Script that makes functional test with the simulator
    - Must be updated with location to your x86prime
    - Reads tests from the tests directory
    - Make more tests!!!

 * data/   - Where your generated data will be
 * tests/  - Where your generated tests should be
